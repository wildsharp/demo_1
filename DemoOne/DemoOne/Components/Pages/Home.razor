@page "/"
@rendermode InteractiveServer
@inject DemoOne.Data.IRegistrationHandler RegistrationHandler

<PageTitle>Home</PageTitle>

<p>    
    <label>
        Register IP:
        <input @bind="InputIp" />        
    </label>   

    @if (!hideErrorMsg)
    {
        <span>
            IP already registered
        </span>
    }    
</p>


<p style="margin-top: 30px">
    <h5>Registrations:</h5>
    @if (!registrations.Any())
    {
        <div>There are no registrations</div>
    }
    else
    {
        <table cellpadding="5">
            <thead>
                <tr>
                    <th>IP</th>
                    <th>Date added</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var (ip, time) in registrations)
                {
                    <tr>
                        <td>@ip</td>
                        <td>@time</td>
                        <td>
                            <button @onclick="x => RemoveRegistration(ip)">X</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }    
</p>

@code{

    // Governs the display of the "already registered" message
    private bool hideErrorMsg = true;

    // Full list of registered IPs
    private List<(string, DateTime)> registrations = new();

    // Property for registering user input IP
    private string? InputIp
    {
        get => string.Empty;
        set => AddRegistration(value);
    }

    // Method for calling the RegistrationHandler to add IP
    private void AddRegistration(string? ip)
    {
        // reset error msg
        hideErrorMsg = true;

        // check if input exists
        if (string.IsNullOrEmpty(ip))
        {
            return;
        }

        // add registration, if fail then show error msg
        if (!RegistrationHandler.AddRegistration(ip))
        {
            hideErrorMsg = false;
            return;
        }

        // read full list of registrations
        registrations = RegistrationHandler.GetRegistrations();
    }    

    // Method for calling the RegistrationHandler to remove IP
    private void RemoveRegistration(string ip)
    {
        // remove IP. Failing is not registered here
        RegistrationHandler.RemoveRegistration(ip);

        // read full list of registrations
        registrations = RegistrationHandler.GetRegistrations();
    }

    // Get the latest list of registraions after rendering
    protected override Task OnInitializedAsync()
    {
        registrations = RegistrationHandler.GetRegistrations();
        return base.OnInitializedAsync();
    }
}